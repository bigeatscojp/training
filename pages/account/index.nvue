<template>
	<view class="c-login">
		<view class="c-login__top">
			<view class="c-group">
				<view class="l-group__text">
					<text class="c-group__text">{{i18n.username}}</text>
				</view>
				<view class="l-group__input">
					<input type="text" class="c-group__input" v-model="username">
				</view>
			</view>
			<view class="c-group">
				<view class="l-group__text">
					<text class="c-group__text">{{i18n.password}}</text>
				</view>
				<view class="l-group__input">
					<input class="c-group__input" type="password" v-model="password">
				</view>
			</view>
		</view>
		<view class="c-login__bottom">
			<view class="l-login__button">
				<button type="primary" class="c-login__button c-button" v-on:click="submit">
					<text class="c-button__text">login</text>
				</button>
<!-- 				 <button id="btn">获取</button> -->
			</view>
			<view class="l-login__message">
				<text class="c-login__message">By proceeding, you agree to these </text>
			</view>
			<view class="l-login__message">
				<text class="c-login__message">Terms and Conditions</text>
			</view>
		</view>
	</view>
</template>
	// <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.js"></script>
	//     <!-- 这里引入mock.js文件 -->
	//     <script src="https://cdn.bootcss.com/Mock.js/1.0.1-beta3/mock-min.js"></script>
<script>
	 // Mock.mock('./StudentInfo.do', "get", {
	 //            'list|4': [{
	 //                'id|+1': 1,              //对象的id属性名依次加1
	 //                "name": '@cname()',     //随机产生一个中文名
	 //                addr: '@county(true)',   //随机产生一个地址
	 //                'age|18-60': 1,         //随机产生一个数字 （范围在18~60之间）
	 //                birth: '@date()',       //随机产生一个日期
	 //                sex: '@integer(0, 1)',  //随机产生一个数学（0/1，0代表男，1代表女）
	 //                email: '@EMAIL()',      //随机产生一个邮箱地址
	 //                'like|1':['看书','运动','听音乐'],//在数组中随机选择一个
	 //                'num1|1-100.2': 1,          //1~100中随机产生一个数字并保留两位小数
	 //                mobile: /^1[3-9][0-9]{9}$/  //以正则产生一个手机号
	 //            }]
	 //        })
	 //        btn.onclick = function () {
	         
	 //            $.ajax({
	 //                type: "get",		//请求的方式
	 //                url: "./StudentInfo.do",         //请求地址
	 //                dataType: "json",   //将服务器返回的数据转换为json对象
	 //                data: {},  //传递给后台的参数 若没有可不写
	 //                success: function (data) {
	 //                    //这里写获得数据后需要执行的代码  e就是从后台获得的json对象；
	 //                    console.log(data);
	 //                }, asynh: true       //设置使用同步或异步  ，可不写默认为异步
	 //            })
	 //        }
	 
// import {
// 		mapState,
// 		mapMutations
// 	} from 'vuex';
// 	export default {
// 		computed: mapState([ 'hasLogin','uerInfo']),
// 		methods: {
// 			...mapMutations(['logout']),
// 			bindLogin() {
// 				if (this.hasLogin) {
// 					this.logout()
// 				} else {
// 					uni.navigateTo({
// 						url: '/pages/account/index'
// 					})
// 				}
// 			}
// 		}
// 	}

 import {
        mapMutations
    } from 'vuex';

    import {
    	domain
    } from '@/api/domain.js'
	import{
		setToken
		}from '@/common/js/storage.js'
		

	// import Mock from 'mockjs'
	// Get the globalData
	const globalData = getApp().globalData
	export default {
		computed: {
			i18n() {
				// return this.$t('login')
				return globalData.$t('login')
			},
			numText() {
				return globalData.$t('login.numText', {
					num: 10
				})
			},
		},
		data() {
			return {
				username: '',
				password: '',
				loading: false
			}
		},
		methods: {
			submit() {
				console.log(this.username)
				console.log(this.password)
				uni.request({
					 url:domain()+'api/login',
					//url:'/api/login',
					//data:'username='+this.username+"&password="+this.password,
					success(mock){
						console.log(mock.data.token)
						console.log('有token')
						setToken(mock.data.token)
						// alert('success')
						uni.navigateTo({
								url: '../address/index'
							})
					}
				})
				// 返回空数组, 代表校验通过
				// const res = Mock.valid({
				// 	username: 'test',
				// 	password: '123'
				// }, {
				// 	username: this.username,
				// 	password: this.password
				// });

				// 如果为空数组即验证通过则返回token
				// const token = !res.length ? 'qwerty' : null;

				// // 修改状态, 存储token
				// !res && this.$store.commit('login', {
				// 	token
				// });

				// // 跳转
				// if (token)
				// 	uni.navigateTo({
				// 		url: '../address/index'
				// 	})
			},
		}
	}
</script>

<style lang="scss" scoped>
	.c-login {
		justify-content: space-between;
	}

	.c-login {
		flex: 1;
	}

	.c-login {
		height: 100%;
	}


	.c-group {}

	.l-group__text,
	.l-group__input,
	.l-login__message,
	.c-login__button {
		width: 750rpx;
		flex-direction: row;
		justify-content: center;
	}

	.c-group__text {
		color: $color-gray-1;
		font-size: $font-small-3;
		text-align: center;
	}

	.c-group__input {
		/* 圆角 */
		border-radius: 6px;
		background-color: $color-gray-2;
		// margin: 0px auto;
		height: 35px;
		width: 250px;
		// border: 0;
	}

	.c-login__message {
		color: $color-gray-1;
		font-size: $font-small-3;
		text-align: center;
		//display: flex;
		justify-content: center;
	}

	.c-login__top {
		margin-top: 80rpx;
	}

	.c-login__bottom {
		padding-bottom: 80rpx;
	}
</style>
